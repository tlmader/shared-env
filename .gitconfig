# This is Git's per-user configuration file.

[alias]
# Basic shortcuts
a = add
c = commit -a -m
ca = commit --amend
s = status -s
cl = clone
co = checkout
br = branch
cp = cherry-pick
diff = diff --word-diff
dc = diff --cached

# Rebase commands
rc = rebase --continue
mt = mergetool

# Reset commands
r = reset
r1 = reset HEAD^
r2 = reset HEAD^^
rh = reset --hard
rh1 = reset HEAD^ --hard
rh2 = reset HEAD^^ --hard

# Stash operations
sl = stash list
sa = stash apply
ss = stash save

# List commits changelog format for PR description
cl = log --pretty=format:"-\\ %s" --decorate

# List commits in short form, with colors and branch/tag annotations
l = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

# List commits in short form, with colors and branch/tag annotations
l = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

# List commits showing changed files
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

# List with no colors if you need to chain the out put with Unix pipes
lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

# List oneline commits showing dates
lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

# List oneline commits showing relative dates
ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

# List commits with short git log
le = log --oneline --decorate

# List with graphs
lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
lg = !"git lg1"

# See all the commits related to a file
filelog = log -u
fl = log -u

# Show modified files in last commit
dl = "!git ll -1"

# Show a diff last commit
dlc = diff --cached HEAD^

# Show content (full diff) of a commit given a revision
dr = "!f() { git diff "$1"^.."$1"; }; f"
lc = "!f() { git ll "$1"^.."$1"; }; f"
diffr = "!f() { git diff "$1"^.."$1"; }; f"

# Find a file path in codebase
f = "!git ls-files | grep -i"

# Search/grep your entire codebase for a string
grep = grep -Iigit
gr = grep -Ii

# Grep from root folder
gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

# Output all your aliases
la = "!git config -l | grep alias | cut -c 7-"i

[core]
editor = code --wait

[diff]
tool = vscode

[difftool "vscode"]
cmd = code --wait --diff $LOCAL $REMOTE

[difftool]
prompt = false

[merge]
tool = vscode
ff = only

[mergetool "vscode"]
cmd = code --wait $MERGED

[mergetool]
keepBackup = false

[pull]
ff = only
